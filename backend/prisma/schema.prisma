datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enum
enum Title {
  MR
  MRS
  MS
  DR
}

enum UserRole {
  GUEST
  CUSTOMER
  MERCHANT
  SUPER_ADMIN
  OPS_ADMIN
  SUPPORT_AGENT
  DEVELOPER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum Lang {
  ZH_HK
  ZH_TW
  ZH_CH
  EN
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum SubscriptionStatus {
  TRIAL
  ESSENTIAL
  GROWTH
  EXPIRED
  CANCELLED
}

enum MerchantRole {
  OWNER
  MANAGER
  FRONTLINE
}

enum QueueEntryStatus {
  WAITING
  SERVING
  DONE
  NO_SHOW
}

enum ActivityType {
  // User Management
  CREATE_USER
  UPDATE_USER
  DELETE_USER
  RESET_USER_PASSWORD
  FORCE_LOGOUT_USER
  LOGIN_USER
  LOGOUT_USER
  CHANGE_USER_ROLE
  SUSPEND_USER

  // Staff Management
  CREATE_STAFF_USER
  UPDATE_STAFF_USER
  DELETE_STAFF_USER
  RESET_STAFF_USER_PASSWORD
  FORCE_LOGOUT_STAFF_USER
  CHANGE_STAFF_USER_ROLE
  SUSPEND_STAFF_USER

  // Merchant Management
  CREATE_MERCHANT
  UPDATE_MERCHANT
  DELETE_MERCHANT
  APPROVE_MERCHANT
  REJECT_MERCHANT

  // Queue Management
  CREATE_QUEUE
  UPDATE_QUEUE
  DELETE_QUEUE
  CLEAR_QUEUE_ENTRIES

  // Support & Ticketing
  CREATE_TICKET
  UPDATE_TICKET
  CLOSE_TICKET
  REOPEN_TICKET
  ASSIGN_TICKET
  ESCALATE_TICKET
  MERGE_TICKETS
  DELETE_TICKET
  SEND_TICKET_REPLY
  ADD_INTERNAL_NOTE
  MARK_TICKET_SPAM

  // Feedback & Reviews
  ACT_ON_FEEDBACK
  DELETE_REVIEW
  RESPOND_TO_FEEDBACK
  REQUEST_FEEDBACK_REVISION

  // Billing
  ISSUE_REFUND
  CANCEL_INVOICE

  // Communications
  SEND_NOTIFICATION
  SEND_EMAIL

  // Content & Configuration
  UPDATE_SYSTEM_SETTING
  CHANGE_SITE_CONTENT

  // Data Operations
  EXPORT_DATA
  IMPORT_DATA

  // System & Access
  LOGIN_ADMIN_PANEL

  // Verification
  VERIFY_EMAIL
}

enum InvoiceStatus {
  PAID
  UNPAID
  FAILED
  REFUNDED
}

enum EmailType {
  RESET_PASSWORD
  SUPPORT_REPLY
  RENEWAL_NOTICE
  VERIFICATION
}

enum EmailStatus {
  SENT
  FAILED
  QUEUED
}

enum AnalyticsType {
  USER
  MERCHANT
  QUEUE_SYSTEM
}

enum MetricType {
  AVG_WAIT_TIME
  TOTAL_SERVED_TIME
  PEAK_HOUR
  NO_SHOW_COUNT
  AVG_SERVICE_DURATION
  QUEUE_ABANDON_RATE
  FEEDBACK_SCORE
  REORDER_ACTIONS_COUNT
  AVG_QUEUE_LENGTH
  NEW_CUSTOMERS_COUNT
  RETURNING_CUSTOMERS_COUNT
  QUEUES_CREATED
  TOP_MERCHANTS_MONTHLY
  TOP_MERCHANTS_WEEKLY
  TOP_MERCHANTS_DAILY
  TOP_MERCHANTS_ANNUALLY
  ERROR_COUNT
  TOTAL_MERCHANTS
  DAILY_ACTIVE_USERS
  ERROR_RATE
  UPTIME_PERCENTAGE
  AVG_SUPPORT_RESPONSE_TIME
  SYSTEM_THROUGHPUT
  SUPPORT_TICKER_VOLUME
  MOST_ACTIVE_REGIONS
  MERCHANT_APPROVAL_RATE
  AVG_FEEDBACK_SCORE
  FEEDBACK_COUNT
  POSTIVE_RATIO
  FEEDBACK_RESPONSE_RATE
  TOTAL_ACCOUNT_DELETIN
}

enum Provider {
  GOOGLE
}

enum Entity {
  QUEUE
  MERCHANT
}

enum ImageType {
  LOGO
  IMAGE
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
  PUBLIC_HOLIDAY
}

enum DeviceType {
  MOBILE
  TABLET
  DESKTOP
  UNKNOWN
}

enum SystemHealthSource {
  SENTRY
  UPTIME_ROBOT
}

enum LegalDocumentType {
  PRIVACY_POLICY
  TERMS_OF_SERVICE
  REFUND_POLICY
}

// User + Auth
model User {
  user_id                        String                       @id @default(uuid())
  title                          Title                        @default(MR)
  username                       String                       @unique
  lname                          String
  fname                          String
  email                          String                       @unique
  password_hash                  String?
  phone                          String
  role                           UserRole                     @default(GUEST)
  status                         UserStatus                   @default(INACTIVE)
  registration_date              DateTime                     @default(now())
  created_at                     DateTime                     @default(now())
  updated_at                     DateTime                     @updatedAt
  last_login                     DateTime?
  lang                           Lang                         @default(EN)
  oauth_accounts                 OAuthAccount[]               @relation("UserOAuthAccounts")
  merchant                       Merchant[]                   @relation("UserMerchants")
  user_merchants                 UserMerchant[]               @relation("UserMerchantStaff")
  queue_entries                  QueueEntry[]                 @relation("UserQueueEntries")
  favorite_merchants             FavoriteMercahnt[]           @relation("UserFavoriteMerchants")
  user_queue_reminder_references UserQueueReminderReference[] @relation("UserQueueReminders")
  password_resets                PasswordReset[]              @relation("UserPasswordResets")
  messages_sent                  Message[]                    @relation("MessageSender")
  messages_received              Message[]                    @relation("MessageReceiver")
  email_logs_sent                EmailLog[]                   @relation("EmailSender")
  reviews                        Review[]                     @relation("UserReviews")
  user_devices                   UserDevice[]                 @relation("UserDevices")
  activity_logs                  ActivityLog[]                @relation("UserActivityLogs")
  email_verified                 Boolean                      @default(false)
  verification_token             String?                        @unique
}

model OAuthAccount {
  oauth_id         String    @id @default(uuid())
  user_id          String
  user             User      @relation("UserOAuthAccounts", fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
  provider         Provider
  provider_user_id String
  email            String
  access_token     String
  refresh_token    String?
  token_expiry     DateTime
  expires_at       DateTime?
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
}

model Merchant {
  merchant_id         String                @id @default(uuid())
  owner_id            String
  owner               User                  @relation("UserMerchants", fields: [owner_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
  approval_status     ApprovalStatus        @default(PENDING)
  business_name       String
  phone                 String                @unique
  email               String                @unique
  address             MerchantAddress[]     @relation("MerchantAddresses")
  description         String?
  subscription_status SubscriptionStatus    @default(TRIAL)
  subscription_start  DateTime?
  subscription_end    DateTime?
  created_at          DateTime              @default(now())
  updated_at          DateTime              @updatedAt
  approved_at         DateTime?             @updatedAt
  opening_hours       MerchantOpeningHour[] @relation("MerchantOpeningHours")
  features            MerchantFeature[]     @relation("MerchantFeatures")
  images              MerchantImage[]       @relation("MerchantImages")
  user_merchants      UserMerchant[]        @relation("MerchantStaff")
  queues              Queue[]               @relation("MerchantQueues")
  favorite_merchants  FavoriteMercahnt[]    @relation("MerchantFavorites")
  reviews             Review[]              @relation("MerchantReviews")
  news                News[]                @relation("MerchantNews")
}

model MerchantAddress {
  address_id String @id @default(uuid()) 
  merchant_id String
  merchant Merchant @relation("MerchantAddresses", fields: [merchant_id], references: [merchant_id], onDelete: Cascade, onUpdate: Cascade)
  street String
  unit String
  floor String
  city String
  state String
  zip String
  country String
}

model MerchantOpeningHour {
  id          String    @id @default(uuid())
  merchant_id String
  merchant    Merchant  @relation("MerchantOpeningHours", fields: [merchant_id], references: [merchant_id], onDelete: Cascade, onUpdate: Cascade)
  day_of_week DayOfWeek
  open_time   DateTime
  close_time  DateTime
}

model MerchantFeature {
  feature_id  String   @id @default(uuid())
  merchant_id String
  merchant    Merchant @relation("MerchantFeatures", fields: [merchant_id], references: [merchant_id], onDelete: Cascade, onUpdate: Cascade)
  label       String?
  is_positive Boolean  @default(true)
  created_at  DateTime @default(now())
}

model MerchantImage {
  image_id    String    @id @default(uuid())
  merchant_id String
  merchant    Merchant  @relation("MerchantImages", fields: [merchant_id], references: [merchant_id], onDelete: Cascade, onUpdate: Cascade)
  image_url   String
  image_type  ImageType
  uploaded_at DateTime  @default(now())
}

model UserMerchant {
  staff_id    String       @id @default(uuid())
  user_id     String
  user        User         @relation("UserMerchantStaff", fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
  merchant_id String
  merchant    Merchant     @relation("MerchantStaff", fields: [merchant_id], references: [merchant_id], onDelete: Cascade, onUpdate: Cascade)
  position    String
  role        MerchantRole
  join_at     DateTime     @default(now())
}

model Queue {
  queue_id          String           @id @default(uuid())
  merchant_id       String
  merchant          Merchant         @relation("MerchantQueues", fields: [merchant_id], references: [merchant_id], onDelete: Cascade, onUpdate: Cascade)
  queue_name        String
  queue_status      QueueEntryStatus @default(WAITING)
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt
  queue_entries     QueueEntry[]     @relation("QueueEntries")
  messages          Message[]        @relation("QueueMessages")
}

model QueueEntry {
  entry_id     String           @id @default(uuid())
  number       Int
  queue_id     String
  queue        Queue            @relation("QueueEntries", fields: [queue_id], references: [queue_id], onDelete: Cascade, onUpdate: Cascade)
  user_id      String
  user         User             @relation("UserQueueEntries", fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
  status       QueueEntryStatus @default(WAITING)
  join_at      DateTime         @default(now())
  updated_at   DateTime         @updatedAt
  served_at    DateTime?
  completed_at DateTime?
}

model FavoriteMercahnt {
  favorite_id             String   @id @default(uuid())
  user_id                 String
  user                    User     @relation("UserFavoriteMerchants", fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
  merchant_id             String
  merchant                Merchant @relation("MerchantFavorites", fields: [merchant_id], references: [merchant_id], onDelete: Cascade, onUpdate: Cascade)
  created_at              DateTime @default(now())
  allow_news_notification Boolean  @default(true)
}

model QueueReminderOption {
  option_key                     String                       @id @default(uuid()) // eg: notify_turn, notify_5th
  label                          String
  description                    String?
  is_active                      Boolean                      @default(true)
  sort_order                     Int                          @default(0)
  user_queue_reminder_references UserQueueReminderReference[] @relation("QueueReminderReferences")
}

model UserQueueReminderReference {
  preference_id String              @id @default(uuid())
  user_id       String
  user          User                @relation("UserQueueReminders", fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
  option_key    String
  option        QueueReminderOption @relation("QueueReminderReferences", fields: [option_key], references: [option_key], onDelete: Cascade, onUpdate: Cascade)
  enabled       Boolean             @default(true)
  created_at    DateTime            @default(now())
  updated_at    DateTime            @updatedAt
}

model AnalyticsLog {
  log_id       String        @id @default(uuid())
  subject_type AnalyticsType
  subject_id   String
  metric_type  MetricType
  value        Float
  record_at    DateTime      @default(now())
}

model ActivityLog {
  log_id       String        @id @default(uuid())
  user_id      String?
  user         User?          @relation("UserActivityLogs", fields: [user_id], references: [user_id])
  action       ActivityType
  action_data  Json
  success      Boolean       @default(true)
  error        String?
  status       Int           @default(200)
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
}

model SystemHealth {
  log_id            String             @id @default(uuid())
  uptime_percentage Float
  error_count       Int
  source            SystemHealthSource
  source_id         String?
  source_data       Json?
  monitor_at        DateTime           @default(now())
}

model PasswordReset {
  reset_id           String   @id @default(uuid())
  user_id            String
  user               User     @relation("UserPasswordResets", fields: [user_id], references: [user_id], onUpdate: Cascade)
  reset_token        String
  reset_token_expiry DateTime
  reset_at           DateTime @default(now())
}

model Message {
  message_id  String   @id @default(uuid())
  sender_id   String
  sender      User     @relation("MessageSender", fields: [sender_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
  receiver_id String
  receiver    User     @relation("MessageReceiver", fields: [receiver_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
  subject_id  String
  subject     Queue?   @relation("QueueMessages", fields: [subject_id], references: [queue_id], onDelete: Cascade, onUpdate: Cascade)
  content     String
  created_at  DateTime @default(now())
}

model EmailTemplate {
  template_id       String      @id @default(uuid())
  template_name     String
  template_content  String
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt
}

model EmailLog {
  email_id        String        @id @default(uuid())
  recipient_email String
  sender_id       String?
  sender          User?         @relation("EmailSender", fields: [sender_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
  subject         String
  content         String
  type            EmailType
  status          EmailStatus
  sent_at         DateTime?
  failed_at       DateTime?
  failed_reason   String?
}


model Invoice {
  invoice_id           String        @id @default(uuid())
  merchant_id          String
  invoice_number       String        @unique
  amount               Float
  currency             String        @default("HKD")
  status               InvoiceStatus
  issued_date          DateTime      @default(now())
  due_date             DateTime
  paid_date            DateTime?
  billing_period_start DateTime
  billing_period_end   DateTime
  payment_method       String
  transaction_id       String
  auto_renewal         Boolean       @default(false)
}

model Tag {
  tag_id      String      @id @default(uuid())
  tag_name    String
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  entity_tags EntityTag[] @relation("TagEntities")
}

model EntityTag {
  id        String @id @default(uuid())
  tag_id    String
  entity_id String
  tag       Tag    @relation("TagEntities", fields: [tag_id], references: [tag_id], onDelete: Cascade, onUpdate: Cascade)
}

model Review {
  review_id   String    @id @default(uuid())
  merchant_id String
  merchant    Merchant  @relation("MerchantReviews", fields: [merchant_id], references: [merchant_id], onDelete: Cascade, onUpdate: Cascade)
  user_id     String
  user        User      @relation("UserReviews", fields: [user_id], references: [user_id], onUpdate: Cascade)
  rating      Int
  comment     String?
  reply       String?
  reply_at    DateTime?
  created_at  DateTime  @default(now())
}

model News {
  news_id     String   @id @default(uuid())
  merchant_id String
  merchant    Merchant @relation("MerchantNews", fields: [merchant_id], references: [merchant_id], onDelete: Cascade, onUpdate: Cascade)
  title       String
  content     String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model FAQ {
  faq_id       String   @id @default(uuid())
  question     String
  answer       String
  published_at DateTime @default(now())
  updated_at   DateTime @updatedAt
}

model LegalDocuement {
  document_id   String            @id @default(uuid())
  document_type LegalDocumentType
  title         String
  content       String
  version       String
  language      Lang              @default(EN)
  is_active     Boolean           @default(true)
  published_at  DateTime          @default(now())
  updated_at    DateTime          @updatedAt
}

model PaymentMethod {
  payment_method_id   String          @id @default(uuid())
  payment_method_name String
  created_at          DateTime        @default(now())
  accept_payments     AcceptPayment[] @relation("PaymentMethodAcceptances")
}

model AcceptPayment {
  payment_id        String        @id @default(uuid())
  payment_method_id String
  payment_method    PaymentMethod @relation("PaymentMethodAcceptances", fields: [payment_method_id], references: [payment_method_id], onDelete: Cascade, onUpdate: Cascade)
  created_at        DateTime      @default(now())
}

model UserDevice {
  device_id     String     @id @default(uuid())
  user_id       String
  user          User       @relation("UserDevices", fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
  device_type   DeviceType
  platform      String
  browser       String
  device_model  String
  os_version    String
  app_version   String
  last_login_at DateTime?
  push_token    String?
  is_active     Boolean    @default(true)
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
}
