generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AcceptPayment {
  payment_id        String        @id
  payment_method_id String
  created_at        DateTime      @default(now())
  PaymentMethod     PaymentMethod @relation(fields: [payment_method_id], references: [payment_method_id], onDelete: Cascade)
}

model APILog {
  log_id        String   @id @default(uuid())
  user_id       String?
  method        String
  endpoint      String
  status        Int
  response_time Float
  ip_address    String
  user_agent    String
  error         String?
  created_at    DateTime @default(now())
  User          User?    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model ActivityLog {
  log_id      String       @id @default(uuid())
  user_id     String?
  action      ActivityType
  action_data Json
  success     Boolean      @default(true)
  error       String?
  status      Int          @default(200)
  created_at  DateTime     @default(now())
  User        User?        @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model Address {
  address_id  String    @id @default(uuid())
  merchant_id String?   @unique
  branch_id   String?   @unique
  street      String
  unit        String?
  floor       String?
  city        String
  state       String
  zip         String
  country     String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  Branch      Branch?   @relation(fields: [branch_id], references: [branch_id], onDelete: Cascade)
  Merchant    Merchant? @relation(fields: [merchant_id], references: [merchant_id], onDelete: Cascade)
}

model AnalyticsLog {
  log_id       String        @id @default(uuid())
  subject_type AnalyticsType
  subject_id   String
  metric_type  MetricType
  value        Float
  record_at    DateTime      @default(now())
}

model Attachment {
  attachment_id  String           @id @default(uuid())
  ticket_id      String?
  file_url       String
  created_at     DateTime         @default(now())
  message_id     String?
  Message        Message?         @relation(fields: [message_id], references: [message_id], onDelete: Cascade)
  Ticket         Ticket?          @relation(fields: [ticket_id], references: [ticket_id], onDelete: Cascade)
  TicketFollowUp TicketFollowUp[] @relation("AttachmentToTicketFollowUp")
}

model Avatar {
  image_id   String   @id @default(uuid())
  user_id    String   @unique
  image_url  String
  created_at DateTime @default(now())
  User       User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model Branch {
  branch_id            String                 @id @default(uuid())
  merchant_id          String
  branch_name          String
  contact_person_id    String
  phone                String?
  email                String?
  description          String?
  is_active            Boolean                @default(true)
  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt
  Address              Address?
  ContactPerson        UserMerchant           @relation("BranchContactPerson", fields: [contact_person_id], references: [staff_id])
  Merchant             Merchant               @relation(fields: [merchant_id], references: [merchant_id], onDelete: Cascade)
  BranchFeature        BranchFeature[]
  BranchImage          BranchImage[]
  BranchOpeningHour    BranchOpeningHour[]
  Queue                Queue[]
  UserMerchantOnBranch UserMerchantOnBranch[]
}

model BranchFeature {
  feature_id  String   @id @default(uuid())
  branch_id   String
  label       String
  is_positive Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  Branch      Branch   @relation(fields: [branch_id], references: [branch_id], onDelete: Cascade)
}

model BranchImage {
  image_id    String    @id @default(uuid())
  branch_id   String
  image_url   String
  image_type  ImageType
  uploaded_at DateTime  @default(now())
  Branch      Branch    @relation(fields: [branch_id], references: [branch_id], onDelete: Cascade)
}

model BranchOpeningHour {
  id          String    @id @default(uuid())
  branch_id   String
  day_of_week DayOfWeek
  open_time   DateTime
  close_time  DateTime
  is_closed   Boolean   @default(false)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  Branch      Branch    @relation(fields: [branch_id], references: [branch_id], onDelete: Cascade)
}

model EmailLog {
  email_id        String      @id @default(uuid())
  recipient_email String
  sender_id       String?
  subject         String
  content         String
  type            EmailType
  status          EmailStatus
  sent_at         DateTime?
  failed_at       DateTime?
  failed_reason   String?
  User            User?       @relation(fields: [sender_id], references: [user_id], onDelete: Cascade)
}

model EmailTemplate {
  template_id      String   @id @default(uuid())
  template_name    String
  template_content String
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
}

model FAQ {
  faq_id       String   @id @default(uuid())
  question     String
  answer       String
  published_at DateTime @default(now())
  updated_at   DateTime @updatedAt
}

model FavoriteMercahnt {
  favorite_id             String   @id @default(uuid())
  user_id                 String
  merchant_id             String
  created_at              DateTime @default(now())
  allow_news_notification Boolean  @default(true)
  Merchant                Merchant @relation(fields: [merchant_id], references: [merchant_id], onDelete: Cascade)
  User                    User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model HiddenChat {
  id            String   @id @default(uuid())
  user_id       String
  other_user_id String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  User          User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@unique([user_id, other_user_id])
}

model Invoice {
  invoice_id           String        @id @default(uuid())
  merchant_id          String
  invoice_number       String        @unique
  amount               Float
  currency             String        @default("HKD")
  status               InvoiceStatus
  issued_date          DateTime      @default(now())
  due_date             DateTime
  paid_date            DateTime?
  billing_period_start DateTime
  billing_period_end   DateTime
  payment_method       String
  transaction_id       String
  auto_renewal         Boolean       @default(false)
}

model LegalDocuement {
  document_id   String            @id @default(uuid())
  document_type LegalDocumentType
  title         String
  content       String
  version       String
  language      Lang              @default(EN)
  is_active     Boolean           @default(true)
  published_at  DateTime          @default(now())
  updated_at    DateTime          @updatedAt
}

model Logo {
  logo_id     String   @id @default(uuid())
  merchant_id String   @unique
  logo_url    String
  created_at  DateTime @default(now())
  Merchant    Merchant @relation(fields: [merchant_id], references: [merchant_id], onDelete: Cascade)
}

model Merchant {
  merchant_id         String             @id @default(uuid())
  owner_id            String             @unique
  approval_status     ApprovalStatus     @default(PENDING)
  business_name       String
  phone               String             @unique
  email               String             @unique
  description         String?
  subscription_status SubscriptionStatus @default(TRIAL)
  subscription_start  DateTime?
  subscription_end    DateTime?
  auto_renewal        Boolean            @default(false)
  created_at          DateTime           @default(now())
  updated_at          DateTime           @updatedAt
  approved_at         DateTime?
  Address             Address?
  Branch              Branch[]
  FavoriteMercahnt    FavoriteMercahnt[]
  Logo                Logo?
  User                User               @relation(fields: [owner_id], references: [user_id], onDelete: Cascade)
  News                News[]
  Review              Review[]
  UserMerchant        UserMerchant[]
}

model Message {
  message_id                     String       @id @default(uuid())
  sender_id                      String
  receiver_id                    String
  content                        String
  is_read                        Boolean      @default(false)
  created_at                     DateTime     @default(now())
  Attachment                     Attachment[]
  User_Message_receiver_idToUser User         @relation("Message_receiver_idToUser", fields: [receiver_id], references: [user_id], onDelete: Cascade)
  User_Message_sender_idToUser   User         @relation("Message_sender_idToUser", fields: [sender_id], references: [user_id], onDelete: Cascade)

  @@index([sender_id, created_at])
  @@index([receiver_id, created_at])
  @@index([sender_id, receiver_id, created_at])
  @@index([is_read])
}

model News {
  news_id     String   @id @default(uuid())
  merchant_id String
  title       String
  content     String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  Merchant    Merchant @relation(fields: [merchant_id], references: [merchant_id], onDelete: Cascade)
}

model Notification {
  notification_id String    @id @default(uuid())
  user_id         String
  title           String
  content         String
  is_read         Boolean   @default(false)
  read_at         DateTime?
  redirect_url    String?
  created_at      DateTime  @default(now())
  User            User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model OAuthAccount {
  oauth_id         String    @id @default(uuid())
  user_id          String
  provider         Provider
  provider_user_id String
  email            String
  access_token     String
  refresh_token    String?
  token_expiry     DateTime
  expires_at       DateTime?
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  User             User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model PasswordReset {
  reset_id           String   @id @default(uuid())
  user_id            String
  reset_token        String
  reset_token_expiry DateTime
  reset_at           DateTime @default(now())
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
  User               User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model PaymentMethod {
  payment_method_id   String          @id @default(uuid())
  payment_method_name String
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt
  AcceptPayment       AcceptPayment[]
}

model Preference {
  preference_id            String         @id @default(uuid())
  user_id                  String         @unique
  allow_email_notification Boolean        @default(true)
  allow_inbox_notification Boolean        @default(true)
  preference_type          PreferenceType
  created_at               DateTime       @default(now())
  updated_at               DateTime       @updatedAt
  User                     User           @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model Queue {
  queue_id     String       @id @default(uuid())
  branch_id    String?
  queue_name   String
  queue_status QueueStatus  @default(CLOSED)
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
  Branch       Branch?      @relation(fields: [branch_id], references: [branch_id], onDelete: Cascade)
  QueueEntry   QueueEntry[]
}

model QueueEntry {
  entry_id     String           @id @default(uuid())
  number       Int
  queue_id     String
  user_id      String
  status       QueueEntryStatus @default(WAITING)
  join_at      DateTime         @default(now())
  updated_at   DateTime         @updatedAt
  served_at    DateTime?
  completed_at DateTime?
  Queue        Queue            @relation(fields: [queue_id], references: [queue_id], onDelete: Cascade)
  User         User             @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model Review {
  review_id   String    @id @default(uuid())
  merchant_id String
  user_id     String
  rating      Int
  comment     String?
  reply       String?
  reply_at    DateTime?
  created_at  DateTime  @default(now())
  Merchant    Merchant  @relation(fields: [merchant_id], references: [merchant_id], onDelete: Cascade)
  User        User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model Session {
  id        String   @id @default(uuid())
  sid       String   @unique
  data      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([expiresAt])
}

model SystemHealth {
  log_id            String             @id @default(uuid())
  uptime_percentage Float
  error_count       Int
  source            SystemHealthSource
  source_id         String?
  source_data       Json?
  monitor_at        DateTime           @default(now())
}

model Tag {
  tag_id      String    @id @default(uuid())
  entity_id   String
  entity_type TagEntity
  tag_name    String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
}

model Ticket {
  ticket_id      String           @id @default(uuid())
  user_id        String
  subject        String
  category       String
  status         TicketStatus
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  assigned_at    DateTime?
  assigned_to    String?
  closed_at      DateTime?
  closed_by      String?
  content        String
  priority       TicketPriority   @default(MEDIUM)
  resolved_at    DateTime?
  Attachment     Attachment[]
  User           User             @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  TicketFollowUp TicketFollowUp[]
}

model TicketFollowUp {
  follow_up_id String       @id @default(uuid())
  ticket_id    String
  admin_id     String
  content      String
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
  Ticket       Ticket       @relation(fields: [ticket_id], references: [ticket_id], onDelete: Cascade)
  Attachment   Attachment[] @relation("AttachmentToTicketFollowUp")
}

model User {
  user_id                           String             @id @default(uuid())
  username                          String             @unique
  lname                             String
  fname                             String
  email                             String             @unique
  password_hash                     String?
  phone                             String             @unique
  role                              UserRole           @default(GUEST)
  status                            UserStatus         @default(INACTIVE)
  registration_date                 DateTime           @default(now())
  created_at                        DateTime           @default(now())
  updated_at                        DateTime           @updatedAt
  last_login                        DateTime?
  lang                              Lang               @default(EN)
  email_verified                    Boolean            @default(false)
  verification_token                String?            @unique
  APILog                            APILog[]
  ActivityLog                       ActivityLog[]
  Avatar                            Avatar?
  EmailLog                          EmailLog[]
  FavoriteMercahnt                  FavoriteMercahnt[]
  HiddenChat                        HiddenChat[]
  Merchant                          Merchant?
  Message_Message_receiver_idToUser Message[]          @relation("Message_receiver_idToUser")
  Message_Message_sender_idToUser   Message[]          @relation("Message_sender_idToUser")
  Notification                      Notification[]
  OAuthAccount                      OAuthAccount[]
  PasswordReset                     PasswordReset[]
  Preference                        Preference?
  QueueEntry                        QueueEntry[]
  Review                            Review[]
  Ticket                            Ticket[]
  UserAdmin                         UserAdmin?
  UserDevice                        UserDevice?
  UserMerchant                      UserMerchant?
}

model UserAdmin {
  admin_id      String    @id @default(uuid())
  user_id       String    @unique
  role          AdminRole
  position      String
  join_at       DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  created_at    DateTime  @default(now())
  supervisor_id String?
  User          User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model UserDevice {
  device_id     String     @id @default(uuid())
  user_id       String     @unique
  device_type   DeviceType
  platform      String
  browser       String
  device_model  String
  os_version    String
  app_version   String
  last_login_at DateTime?
  push_token    String?
  is_active     Boolean    @default(true)
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  User          User       @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model UserMerchant {
  staff_id             String                 @id @default(uuid())
  user_id              String                 @unique
  merchant_id          String
  position             String
  role                 MerchantRole
  join_at              DateTime               @default(now())
  selected_branch_id   String?
  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt
  Branch               Branch[]               @relation("BranchContactPerson")
  Merchant             Merchant               @relation(fields: [merchant_id], references: [merchant_id], onDelete: Cascade)
  User                 User                   @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  UserMerchantOnBranch UserMerchantOnBranch[]
}

model UserMerchantOnBranch {
  staff_id     String       @default(uuid())
  branch_id    String
  assigned_at  DateTime     @default(now())
  Branch       Branch       @relation(fields: [branch_id], references: [branch_id], onDelete: Cascade)
  UserMerchant UserMerchant @relation(fields: [staff_id], references: [staff_id], onDelete: Cascade)

  @@id([staff_id, branch_id])
}

enum ActivityType {
  CREATE_USER
  UPDATE_USER
  DELETE_USER
  RESET_USER_PASSWORD
  FORCE_LOGOUT_USER
  LOGIN_USER
  LOGOUT_USER
  VIEW_PROFILE
  CHANGE_USER_ROLE
  CHANGE_PASSWORD
  SUSPEND_USER
  CREATE_STAFF_USER
  UPDATE_STAFF_USER
  DELETE_STAFF_USER
  RESET_STAFF_USER_PASSWORD
  FORCE_LOGOUT_STAFF_USER
  CHANGE_STAFF_USER_ROLE
  SUSPEND_STAFF_USER
  CREATE_MERCHANT
  UPDATE_MERCHANT
  DELETE_MERCHANT
  CREATE_BRANCH
  UPDATE_BRANCH
  DELETE_BRANCH
  APPROVE_MERCHANT
  REJECT_MERCHANT
  CREATE_QUEUE
  UPDATE_QUEUE
  DELETE_QUEUE
  CLEAR_QUEUE_ENTRIES
  CREATE_TICKET
  UPDATE_TICKET
  CLOSE_TICKET
  REOPEN_TICKET
  ASSIGN_TICKET
  ESCALATE_TICKET
  MERGE_TICKETS
  DELETE_TICKET
  SEND_TICKET_REPLY
  ADD_INTERNAL_NOTE
  MARK_TICKET_SPAM
  ACT_ON_FEEDBACK
  DELETE_REVIEW
  RESPOND_TO_FEEDBACK
  REQUEST_FEEDBACK_REVISION
  ISSUE_REFUND
  CANCEL_INVOICE
  SEND_NOTIFICATION
  SEND_EMAIL
  UPDATE_SYSTEM_SETTING
  CHANGE_SITE_CONTENT
  EXPORT_DATA
  IMPORT_DATA
  LOGIN_ADMIN_PANEL
  VERIFY_EMAIL
  OPEN_OR_CLOSE_QUEUE
}

enum AnalyticsType {
  USER
  MERCHANT
  QUEUE_SYSTEM
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
  PUBLIC_HOLIDAY
}

enum DeviceType {
  MOBILE
  TABLET
  DESKTOP
  UNKNOWN
}

enum EmailStatus {
  SENT
  FAILED
  QUEUED
}

enum EmailType {
  RESET_PASSWORD
  SUPPORT_REPLY
  RENEWAL_NOTICE
  VERIFICATION
}

enum Entity {
  QUEUE
  MERCHANT
}

enum ImageType {
  LOGO
  IMAGE
  FEATURE_IMAGE
}

enum InvoiceStatus {
  PAID
  UNPAID
  FAILED
  REFUNDED
}

enum Lang {
  ZH
  ZH_CH
  EN
}

enum LegalDocumentType {
  PRIVACY_POLICY
  TERMS_OF_SERVICE
  REFUND_POLICY
}

enum MerchantRole {
  OWNER
  MANAGER
  FRONTLINE
}

enum MetricType {
  AVG_WAIT_TIME
  TOTAL_SERVED_TIME
  PEAK_HOUR
  NO_SHOW_COUNT
  AVG_SERVICE_DURATION
  QUEUE_ABANDON_RATE
  FEEDBACK_SCORE
  REORDER_ACTIONS_COUNT
  AVG_QUEUE_LENGTH
  NEW_CUSTOMERS_COUNT
  RETURNING_CUSTOMERS_COUNT
  QUEUES_CREATED
  TOP_MERCHANTS_MONTHLY
  TOP_MERCHANTS_WEEKLY
  TOP_MERCHANTS_DAILY
  TOP_MERCHANTS_ANNUALLY
  ERROR_COUNT
  TOTAL_MERCHANTS
  DAILY_ACTIVE_USERS
  ERROR_RATE
  UPTIME_PERCENTAGE
  AVG_SUPPORT_RESPONSE_TIME
  SYSTEM_THROUGHPUT
  SUPPORT_TICKER_VOLUME
  MOST_ACTIVE_REGIONS
  MERCHANT_APPROVAL_RATE
  AVG_FEEDBACK_SCORE
  FEEDBACK_COUNT
  POSTIVE_RATIO
  FEEDBACK_RESPONSE_RATE
  TOTAL_ACCOUNT_DELETIN
}

enum PreferenceType {
  QUEUE_ENTRY
  MESSAGE
  FEEDBACK
}

enum Provider {
  GOOGLE
}

enum QueueEntryStatus {
  WAITING
  SERVING
  DONE
  NO_SHOW
}

enum QueueStatus {
  OPEN
  CLOSED
}

enum SubscriptionStatus {
  TRIAL
  ESSENTIAL
  GROWTH
  EXPIRED
  CANCELLED
}

enum SystemHealthSource {
  SENTRY
  UPTIME_ROBOT
}

enum TagEntity {
  MERCHANT
  QUEUE
  BRANCH
}

enum UserRole {
  GUEST
  CUSTOMER
  MERCHANT
  ADMIN
}

enum AdminRole {
  SUPER_ADMIN
  OPS_ADMIN
  SUPPORT_AGENT
  DEVELOPER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum TicketStatus {
  OPEN
  RESOLVED
  IN_PROGRESS
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
